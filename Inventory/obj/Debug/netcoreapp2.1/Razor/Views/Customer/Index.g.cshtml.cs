#pragma checksum "C:\Users\X163269\Desktop\LED\Inventory\Inventory\Views\Customer\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "869516cf138e740e4393c05cf7b2b4ea857b189f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Customer_Index), @"mvc.1.0.view", @"/Views/Customer/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Customer/Index.cshtml", typeof(AspNetCore.Views_Customer_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\X163269\Desktop\LED\Inventory\Inventory\Views\_ViewImports.cshtml"
using Inventory;

#line default
#line hidden
#line 2 "C:\Users\X163269\Desktop\LED\Inventory\Inventory\Views\_ViewImports.cshtml"
using Inventory.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"869516cf138e740e4393c05cf7b2b4ea857b189f", @"/Views/Customer/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ddd647dc521e354fabd3c5f5959fac0949cf3697", @"/Views/_ViewImports.cshtml")]
    public class Views_Customer_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Users\X163269\Desktop\LED\Inventory\Inventory\Views\Customer\Index.cshtml"
  
    ViewData["Title"] = "Customer";

#line default
#line hidden
            BeginContext(46, 318, true);
            WriteLiteral(@"
<div class=""row"">
    <div class=""col-md-12"">
        <div class=""card"">
            <div class=""card-header card-header-icon card-header-rose"">
                <div class=""card-icon"">
                    <i class=""material-icons"">assignment</i>
                </div>
                <h4 class=""card-title "">");
            EndContext();
            BeginContext(365, 17, false);
#line 13 "C:\Users\X163269\Desktop\LED\Inventory\Inventory\Views\Customer\Index.cshtml"
                                   Write(ViewData["Title"]);

#line default
#line hidden
            EndContext();
            BeginContext(382, 163, true);
            WriteLiteral("</h4>\r\n            </div>\r\n            <div class=\"card-body\">\r\n                <div id=\"Customer\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(562, 2995, true);
                WriteLiteral(@"
    <script>
        $(document).ready(function () {
            var crudServiceBaseUrl = ""https://demos.telerik.com/kendo-ui/service"",
                dataSource = new kendo.data.DataSource({
                    transport: {
                        read: {
                            url: crudServiceBaseUrl + ""/Products"",
                            dataType: ""jsonp""
                        },
                        update: {
                            url: crudServiceBaseUrl + ""/Products/Update"",
                            dataType: ""jsonp""
                        },
                        destroy: {
                            url: crudServiceBaseUrl + ""/Products/Destroy"",
                            dataType: ""jsonp""
                        },
                        create: {
                            url: crudServiceBaseUrl + ""/Products/Create"",
                            dataType: ""jsonp""
                        },
                        parameterMap: function (options, o");
                WriteLiteral(@"peration) {
                            if (operation !== ""read"" && options.models) {
                                return { models: kendo.stringify(options.models) };
                            }
                        }
                    },
                    batch: true,
                    pageSize: 20,
                    schema: {
                        model: {
                            id: ""ProductID"",
                            fields: {
                                ProductID: { editable: false, nullable: true },
                                ProductName: { validation: { required: true } },
                                UnitPrice: { type: ""number"", validation: { required: true, min: 1 } },
                                Discontinued: { type: ""boolean"" },
                                UnitsInStock: { type: ""number"", validation: { min: 0, required: true } }
                            }
                        }
                    }
                });

     ");
                WriteLiteral(@"       $(""#Customer"").kendoGrid({
                dataSource: dataSource,
                pageable: true,
                height: 650,
                toolbar: [""create""],
                columns: [
                    { field: ""ProductName"", title: ""Product Name"" },
                    { field: ""UnitPrice"", title: ""Unit Price"", format: ""{0:c}"", width: ""120px"" },
                    { field: ""UnitsInStock"", title: ""Units In Stock"", width: ""120px"" },
                    { field: ""Discontinued"", width: ""120px"", editor: customBoolEditor },
                    { command: [""edit"", ""destroy""], title: ""&nbsp;"", width: ""250px"" }],
                editable: ""popup""
            });
        });

        function customBoolEditor(container, options) {
            $('<input class=""k-checkbox"" type=""checkbox"" name=""Discontinued"" data-type=""boolean"" data-bind=""checked:Discontinued"">').appendTo(container);
        }
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
